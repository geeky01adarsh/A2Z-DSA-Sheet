// Brute Force
vector<int> Solve(int n, vector<int> &nums)
{
    unordered_map<int, int> mp;
    for (auto i : nums)
    {
        mp[i]++;
    }
    int chk = n / 3;
    vector<int> ans;
    for (auto i : nums)
    {
        if (mp[i] > chk)
        {
            ans.push_back(i);
            mp.erase(i);
        }
    }
    if (!ans.size())
        return {-1};
    return ans;
}

// optimized:- O(1)->Space
vector<int> Solve(int n, vector<int> &nums)
{
    int num1 = -1, num2 = -1, c1 = 0, c2 = 0;
    for (int i = 0; i < n; i++)
    {
        if (nums[i] == num1)
            c1++;
        else if (nums[i] == num2)
            c2++;
        else if (c1 == 0)
        {
            num1 = nums[i];
            c1 = 1;
        }
        else if (c2 == 0)
        {
            num2 = nums[i];
            c2 = 1;
        }
        else
        {
            c1--, c2--;
        }
    }
    c1 = 0, c2 = 0;
    for (auto i : nums)
    {
        if (i == num1)
            c1++;
        if (i == num2)
            c2++;
    }
    vector<int> ans;
    if (c1 > n / 3)
        ans.push_back(num1);
    if (c2 > n / 3)
        ans.push_back(num2);
    if (!ans.size())
        return {-1};
    return ans;
}