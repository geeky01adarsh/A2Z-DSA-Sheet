ll merge(ll arr[], ll s, ll m, ll e)
{
    ll i = s, j = m, k = 0;
    ll inv_count = 0;
    ll helper[(e - s + 1)];
    while (i < m && j <= e)
    {
        if (arr[i] <= arr[j])
        {
            helper[k++] = arr[i++];
        }
        else
        {
            inv_count += (m - i);
            helper[k++] = arr[j++];
        }
    }
    while (i < m)
    {
        helper[k++] = arr[i++];
    }
    while (j <= e)
    {
        helper[k++] = arr[j++];
    }
    for (i = s; i <= e; i++)
        arr[i] = helper[i - s];
    return inv_count;
}

ll mergeSort(ll arr[], ll s, ll e)
{
    ll ans = 0;
    if (s < e)
    {
        ll m = (s + e) / 2;
        ans += mergeSort(arr, s, m);
        ans += mergeSort(arr, m + 1, e);

        ans += merge(arr, s, m + 1, e);
    }
    return ans;
}

long long int inversionCount(long long arr[], long long N)
{
    return mergeSort(arr, 0, N - 1);
}
