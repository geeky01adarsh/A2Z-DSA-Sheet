// brute force
// space = time = O(1e5+1)

int findLongestConseqSubseq(int arr[], int n)
{
    vector<bool> chk(1e5 + 1, 0);
    for (int i = 0; i < n; i++)
        chk[arr[i]] = 1;
    int ans = 0;
    for (int i = 0; i < 1e5 + 1; i++)
    {
        int temp = 0;
        while (i < 1e5 + 1 && chk[i])
        {
            temp++;
            i++;
        }
        ans = max(ans, temp);
    }
    return ans;
}   

// optimized:- using hashing
int findLongestConseqSubseq(int arr[], int n)
{
    unordered_set<int> s;
    int ans = 0;
    for (int i = 0; i < n; i++)
        s.insert(arr[i]);
    for (int i = 0; i < n; i++)
    {
        if (!s.count(arr[i] - 1))
        {
            int curr = arr[i];
            int temp = 0;
            while (s.count(curr++))
                temp++;
            ans = max(ans, temp);
        }
    }
    return ans;
}