// brute force :- O(m+n)
vector<int> findUnion(int arr1[], int arr2[], int n, int m)
{
    int i = 0, j = 0;
    vector<int> unionArr;
    unionArr.push_back(min(arr1[0], arr2[0]));
    while (i < n && j < m)
    {
        if (unionArr.back() == arr1[i])
        {
            i++;
            continue;
        }
        if (unionArr.back() == arr2[j])
        {
            j++;
            continue;
        }
        if (arr1[i] == arr2[j])
            unionArr.push_back(arr1[i++]), j++;
        else if (arr1[i] > arr2[j])
            unionArr.push_back(arr2[j++]);
        else
            unionArr.push_back(arr1[i++]);
    }
    while (i < n)
    {
        if (unionArr.back() == arr1[i])
        {
            i++;
            continue;
        }
        unionArr.push_back(arr1[i++]);
    }
    while (j < m)
    {
        if (unionArr.back() == arr2[j])
        {
            j++;
            continue;
        }
        unionArr.push_back(arr2[j++]);
    }
    return unionArr;
}