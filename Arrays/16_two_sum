// brute force:- O(N^2)

vector<int> twoSum(vector<int> &nums, int x)
{
    vector<int> ans;
    for (int i = 0; i < nums.size(); i++)
    {
        for (int j = i+1; j < nums.size(); j++)
        {
            if (nums[i] + nums[j] == x && i != j)
            {
                ans.push_back(i);
                ans.push_back(j);
                return ans;
            }
        }
    }
    return ans;
}



// efficient approach

vector<int> twoSum(vector<int> &nums, int x){
    map<int, int> mp;
    for (int i = 0; i < nums.size(); i++)
    {
        auto p = mp.find(x - nums[i]);
        if(p!=mp.end()){
            return {p->second, i};
        }
        mp.insert{nums[i], i};
    }
    
}


// returning all two sum pairs
vector<pair<int, int>> allPairs(int A[], int B[], int n, int m, int x)
{
    vector<pair<int, int>> ans;
    sort(A, A + n);
    set<int> st;
    for (int i = 0; i < m; i++)
    {
        st.insert(B[i]);
    }
    for (int i = 0; i < n; i++)
    {
        if (st.count(x - A[i]))
        {
            ans.push_back({A[i], x - A[i]});
        }
    }
    return ans;
}